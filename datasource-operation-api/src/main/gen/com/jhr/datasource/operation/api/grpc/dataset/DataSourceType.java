// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataset.proto

package com.jhr.datasource.operation.api.grpc.dataset;

/**
 * Protobuf enum {@code dataset.DataSourceType}
 */
public enum DataSourceType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>DST_NOT_SPECIFIED = 0;</code>
   */
  DST_NOT_SPECIFIED(0),
  /**
   * <code>RDBMS = 1;</code>
   */
  RDBMS(1),
  /**
   * <code>BIG_DATA = 2;</code>
   */
  BIG_DATA(2),
  /**
   * <code>MQ = 3;</code>
   */
  MQ(3),
  /**
   * <code>FILE_SERVER = 4;</code>
   */
  FILE_SERVER(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>DST_NOT_SPECIFIED = 0;</code>
   */
  public static final int DST_NOT_SPECIFIED_VALUE = 0;
  /**
   * <code>RDBMS = 1;</code>
   */
  public static final int RDBMS_VALUE = 1;
  /**
   * <code>BIG_DATA = 2;</code>
   */
  public static final int BIG_DATA_VALUE = 2;
  /**
   * <code>MQ = 3;</code>
   */
  public static final int MQ_VALUE = 3;
  /**
   * <code>FILE_SERVER = 4;</code>
   */
  public static final int FILE_SERVER_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static DataSourceType valueOf(int value) {
    return forNumber(value);
  }

  public static DataSourceType forNumber(int value) {
    switch (value) {
      case 0: return DST_NOT_SPECIFIED;
      case 1: return RDBMS;
      case 2: return BIG_DATA;
      case 3: return MQ;
      case 4: return FILE_SERVER;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<DataSourceType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      DataSourceType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<DataSourceType>() {
          public DataSourceType findValueByNumber(int number) {
            return DataSourceType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.jhr.datasource.operation.api.grpc.dataset.DataSetProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final DataSourceType[] VALUES = values();

  public static DataSourceType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private DataSourceType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:dataset.DataSourceType)
}

