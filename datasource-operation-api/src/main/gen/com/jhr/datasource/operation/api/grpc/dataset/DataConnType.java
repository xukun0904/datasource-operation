// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataset.proto

package com.jhr.datasource.operation.api.grpc.dataset;

/**
 * Protobuf enum {@code dataset.DataConnType}
 */
public enum DataConnType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>DCT_NOT_SPECIFIED = 0;</code>
   */
  DCT_NOT_SPECIFIED(0),
  /**
   * <code>GAUSS_DB = 1;</code>
   */
  GAUSS_DB(1),
  /**
   * <code>MYSQL = 2;</code>
   */
  MYSQL(2),
  /**
   * <code>ORACLE = 3;</code>
   */
  ORACLE(3),
  /**
   * <code>HIVE = 21;</code>
   */
  HIVE(21),
  /**
   * <code>HBASE = 22;</code>
   */
  HBASE(22),
  /**
   * <code>KAFKA = 31;</code>
   */
  KAFKA(31),
  /**
   * <code>FTP = 41;</code>
   */
  FTP(41),
  /**
   * <code>SFTP = 42;</code>
   */
  SFTP(42),
  /**
   * <code>HDFS = 43;</code>
   */
  HDFS(43),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>DCT_NOT_SPECIFIED = 0;</code>
   */
  public static final int DCT_NOT_SPECIFIED_VALUE = 0;
  /**
   * <code>GAUSS_DB = 1;</code>
   */
  public static final int GAUSS_DB_VALUE = 1;
  /**
   * <code>MYSQL = 2;</code>
   */
  public static final int MYSQL_VALUE = 2;
  /**
   * <code>ORACLE = 3;</code>
   */
  public static final int ORACLE_VALUE = 3;
  /**
   * <code>HIVE = 21;</code>
   */
  public static final int HIVE_VALUE = 21;
  /**
   * <code>HBASE = 22;</code>
   */
  public static final int HBASE_VALUE = 22;
  /**
   * <code>KAFKA = 31;</code>
   */
  public static final int KAFKA_VALUE = 31;
  /**
   * <code>FTP = 41;</code>
   */
  public static final int FTP_VALUE = 41;
  /**
   * <code>SFTP = 42;</code>
   */
  public static final int SFTP_VALUE = 42;
  /**
   * <code>HDFS = 43;</code>
   */
  public static final int HDFS_VALUE = 43;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static DataConnType valueOf(int value) {
    return forNumber(value);
  }

  public static DataConnType forNumber(int value) {
    switch (value) {
      case 0: return DCT_NOT_SPECIFIED;
      case 1: return GAUSS_DB;
      case 2: return MYSQL;
      case 3: return ORACLE;
      case 21: return HIVE;
      case 22: return HBASE;
      case 31: return KAFKA;
      case 41: return FTP;
      case 42: return SFTP;
      case 43: return HDFS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<DataConnType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      DataConnType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<DataConnType>() {
          public DataConnType findValueByNumber(int number) {
            return DataConnType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.jhr.datasource.operation.api.grpc.dataset.DataSetProto.getDescriptor().getEnumTypes().get(2);
  }

  private static final DataConnType[] VALUES = values();

  public static DataConnType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private DataConnType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:dataset.DataConnType)
}

